import numpy as np
import random
import matplotlib.pyplot as plt
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Flatten
In [ ]:
x_train=np.loadtxt('input.csv',delimiter=',')
y_train=np.loadtxt('labels.csv',delimiter=',')
x_test=np.loadtxt('input_test.csv',delimiter=',')
y_test=np.loadtxt('labels_test.csv',delimiter=',')
In [ ]:
x_train=x_train.reshape(len(x_train),100,100,3)
y_train=y_train.reshape(len(y_train),1)

x_test=x_test.reshape(len(x_test),100,100,3)
y_test=y_test.reshape(len(y_test),1)

x_train=x_train/255;
y_train=y_train/255;
In [ ]:
print('shape of x_train',x_train.shape)
print('shape of y_train',y_train.shape)
print('shape of x_test',x_test.shape)
print('shape of y_test',y_test.shape)
In [ ]:
index=random.randint(0,len(x_train))
plt.imshow(x_train[index, :])
plt.show()
In [ ]:
model = Sequential([
    Conv2D(32,(3,3),activation='relu',input_shape=(100,100,3)),
    MaxPooling2D((2,2)),
    
    Conv2D(32,(3,3),activation='relu'),
    MaxPooling2D((2,2)),
    
    Flatten(),
    Dense(64,activation='relu'),
    Dense(1,activation='sigmoid')
])
In [ ]:
# optimizer=keras.optimizer.SGD(learning_rate=0.001)
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
In [ ]:
model.fit(x_train,y_train,epochs=5,batch_size=64)
In [ ]:
model.evaluate(x_test,y_test)
In [ ]:
index2=random.randint(0,len(y_test))
plt.imshow(x_test[index2,:])
plt.show()

y_pred=model.predict(x_test[index2,:].reshape(1,100,100,3))

if(y_pred==0):
    pred='dog'
else:
    pred='cat'

print('Predicted image is :',pred)
